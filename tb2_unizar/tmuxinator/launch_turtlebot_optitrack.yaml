<%
# Input parameters
tb_namespace           = @settings["tb_namespace"]
%>
name: <%= tb_namespace %>
attach: false
root: ./
startup_window: mission_monitoring
windows:
  # Mission monitoring
  - mission_monitoring:
      layout:
      panes:
        - echo Run here the mission

  # Kobuki
  - kobuki:
      layout:
      panes:
        - ros2 launch tb2_unizar kobuki_node_optitrack.launch.py
        - ros2 launch tb2_unizar kobuki_description_unizar.launch.py urdf_file:=urdf/turtlebot_unizar_optitrack.urdf.xacro use_sim_time:=false use_namespace:=false
  - navigation:
      layout:
      panes:
        - ros2 launch nav2_bringup bringup_launch.py use_localization:=False use_namespace:=False use_composite:=False map:=maps/dummy.yaml params_file:=config/optitrack/nav2_params.yaml
        # Map server is not run when not using localization expecting slam to be active. Thus, we need to run a dummy map:
        - ros2 launch tb2_unizar nav2_map_server.launch.py map:=maps/dummy.yaml use_sim_time:=false use_namespace:=false params_file:=config/optitrack/nav2_params.yaml
  # Pose
  - pose:
      layout:
      panes:
      # This should ideally be in the ground station for multi-robot setups.
        - ros2 launch mocap4r2_optitrack_driver optitrack2.launch.py namespace:=mocap config_file:=config/optitrack/mocap4r2_optitrack.yaml
        - sleep 1; ros2 lifecycle set /mocap/mocap4r2_optitrack_driver_node activate
        # The mocap4r2_optitrack_driver will publish 
        - sleep 2; ros2 run tb2_unizar gt_pose_broadcaster_node --ros-args -r rigid_bodies:=/mocap/rigid_bodies -p rigid_body_name:=4
  - static_transforms:
      layout:
      panes:
        # The map/earth transform is required for AS2 in the ground station
        # - sleep 2; ros2 run tf2_ros static_transform_publisher --x 0 --y 0 --z 0 --qx 0 --qy 0 --qz 0 --qw 1 --child-frame-id /map --frame-id /earth
        - sleep 2; ros2 run tf2_ros static_transform_publisher --x 0 --y 0 --z 0 --qx 0 --qy 0 --qz 0 --qw 1 --child-frame-id /odom --frame-id /map